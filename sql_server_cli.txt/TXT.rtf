{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;\f2\fmodern\fcharset0 Courier;
\f3\fnil\fcharset0 Verdana-Bold;\f4\fnil\fcharset0 HelveticaNeue-Medium;\f5\fnil\fcharset0 HelveticaNeue;
\f6\fnil\fcharset0 .AppleSystemUIFontMonospaced-Regular;}
{\colortbl;\red255\green255\blue255;\red22\green39\blue64;\red255\green255\blue255;\red85\green85\blue85;
\red237\green237\blue237;\red87\green177\blue64;\red27\green31\blue35;}
{\*\expandedcolortbl;;\cssrgb\c10980\c20784\c32157;\cssrgb\c100000\c100000\c100000;\cssrgb\c40784\c40784\c40784;
\cssrgb\c94510\c94510\c94510;\cssrgb\c40392\c73333\c31765;\cssrgb\c14118\c16078\c18431;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww18820\viewh12980\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
\
\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\
SQL command line\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
https://www.sqlshack.com/working-sql-server-command-line-sqlcmd/\
\
\
\
\
\
https://www.databasejournal.com/ms-sql/top-10-transact-sql-statements-a-sql-server-dba-should-know/\
\
\
\
\pard\pardeftab720\sa400\partightenfactor0

\f1\fs64 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Server Level Transact-SQL Statements a SQL Server DBA should know\
\pard\pardeftab720\sa340\partightenfactor0

\fs52 \cf2 T-SQL Statement 1\
\pard\pardeftab720\sa520\partightenfactor0

\fs32 \cf4 \strokec4 The following T-SQL statement retrieves information such as Hostname, Current instance name, Edition, Server type, ServicePack and version number from current SQL Server connection. \'91Edition\'92 will give information on a 32 bit or 64 bit architecture and \'91Productlevel\'92 gives information about what service pack your SQL Server is on. It also displays if the current SQL Server is a clustered server. Refer Fig 1.1\
\pard\pardeftab720\partightenfactor0

\f2 \cf4 \cb5 SELECT \
          SERVERPROPERTY('MachineName') as Host,\
          SERVERPROPERTY('InstanceName') as Instance,\
          SERVERPROPERTY('Edition') as Edition, /*shows 32 bit or 64 bit*/\
          SERVERPROPERTY('ProductLevel') as ProductLevel, /* RTM or SP1 etc*/\
          Case SERVERPROPERTY('IsClustered') when 1 then 'CLUSTERED' else\
      'STANDALONE' end as ServerType,\
          @@VERSION as VersionNumber\

\f1 \cb1 {{\NeXTGraphic mak-sql-statements-image001.jpg \width9360 \height525 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\pard\pardeftab720\sa520\partightenfactor0
\cf4 \uc0\u8232 
\f3\b\fs21\fsmilli10667 \cb3 Fig 1.1
\f1\b0\fs32 \
\pard\pardeftab720\sa340\partightenfactor0

\fs52 \cf2 \strokec2 T-SQL Statement 2\
\pard\pardeftab720\sa520\partightenfactor0

\fs32 \cf4 \strokec4 Server level configuration controls some of the features and performance of SQL Server. It is also important for a SQL Server DBA to know the server level configuration information. The following SQL Statement will give all of the information related to Server level configuration. Refer Fig 1.2\
\pard\pardeftab720\partightenfactor0

\f2 \cf4 \cb5 SELECT * from sys.configurations order by NAME\
\pard\pardeftab720\sa520\partightenfactor0

\f1 \cf4 \cb3 If you are using SQL Server 2000, you can execute the following command instead.\
\pard\pardeftab720\partightenfactor0

\f2 \cf4 \cb5 SP_CONFIGURE 'show advanced options',1\
go\
RECONFIGURE with OVERRIDE\
go\
SP_CONFIGURE\
go\
\pard\pardeftab720\partightenfactor0

\f1 \cf4 \cb1 {{\NeXTGraphic mak-sql-statements-image002.jpg \width9360 \height2625 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\pardeftab720\partightenfactor0
\cf4 \
\pard\pardeftab720\sa520\partightenfactor0
\cf4 \uc0\u8232 
\f3\b\fs21\fsmilli10667 \cb3 Fig 1.2
\f1\b0\fs32 \
\pard\pardeftab720\sa340\partightenfactor0

\fs52 \cf2 \strokec2 T-SQL Statement 3\
\pard\pardeftab720\sa520\partightenfactor0

\fs32 \cf4 \strokec4 Security is a very important aspect that a DBA should know about. It is also important to know which login has a\'a0{\field{\*\fldinst{HYPERLINK "https://www.webopedia.com/TERM/S/system_administrator.html"}}{\fldrslt \cf6 \strokec6 sysadmin}}\'a0or security admin server level role. The following SQL Command will show information related to the security admin server role and system admin server role. Refer Fig 1.3\
\pard\pardeftab720\partightenfactor0

\f2 \cf4 \cb5 SELECT l.name, l.denylogin, l.isntname, l.isntgroup, l.isntuser\
  FROM master.dbo.syslogins l\
WHERE l.sysadmin = 1 OR l.securityadmin = 1\
\pard\pardeftab720\partightenfactor0

\f1 \cf4 \cb1 {{\NeXTGraphic mak-sql-statements-image003.jpg \width6660 \height1815 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\pardeftab720\partightenfactor0
\cf4 \
\pard\pardeftab720\sa520\partightenfactor0
\cf4 \uc0\u8232 
\f3\b\fs21\fsmilli10667 \cb3 Fig 1.
\f1\b0\fs32 3\
\pard\pardeftab720\sa340\partightenfactor0

\fs52 \cf2 \strokec2 T-SQL Statement 4\
\pard\pardeftab720\sa520\partightenfactor0

\fs32 \cf4 \strokec4 Another important bit of information that you need to know as a DBA is all of the traces that are enabled. The following T-SQL statement will list all of the trace flags that are enabled gloabally on the server. Refer Fig 1.4\
\pard\pardeftab720\partightenfactor0

\f2 \cf4 \cb5 DBCC TRACESTATUS(-1);\
\pard\pardeftab720\sa520\partightenfactor0

\f1 \cf4 \cb3 The following T-SQL statement will list all the trace flags that are enabled on the current sql server connection. Refer Fig 1.4\
\pard\pardeftab720\partightenfactor0

\f2 \cf4 \cb5 DBCC TRACESTATUS();\
\pard\pardeftab720\partightenfactor0

\f1 \cf4 \cb1 {{\NeXTGraphic mak-sql-statements-image004.jpg \width3270 \height750 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\pardeftab720\partightenfactor0
\cf4 \
\pard\pardeftab720\sa520\partightenfactor0
\cf4 \uc0\u8232 
\f3\b\fs21\fsmilli10667 \cb3 Fig 1.4
\f1\b0\fs32 \
\pard\pardeftab720\sa400\partightenfactor0

\fs64 \cf2 \strokec2 Database Level Transact-SQL Statements a SQL Server DBA should know\
\pard\pardeftab720\sa340\partightenfactor0

\fs52 \cf2 T-SQL Statement 5\
\pard\pardeftab720\sa520\partightenfactor0

\fs32 \cf4 \strokec4 Getting Database level information is equally as important as Server level information. The following T-SQL statement gives information on the database names, their compatibility level and also the recovery model and their current status. The result from this T-SQL Statement will help you to determine if there is any compatibility level update necessary. When upgrading from an older version to new version, the compatibility level of the database may not be in the desired level. The following statement will help you to list all of the database names with compatibilty level. It also lists the online/offline status of the database as well as helping the DBA to see if any update to recovery model is necessary. Refer Fig 1.5\
\pard\pardeftab720\partightenfactor0

\f2 \cf4 \cb5 SELECT name,compatibility_level,recovery_model_desc,state_desc  FROM sys.databases\
\pard\pardeftab720\partightenfactor0

\f1 \cf4 \cb1 {{\NeXTGraphic mak-sql-statements-image005.jpg \width7395 \height3645 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\pardeftab720\partightenfactor0
\cf4 \
\pard\pardeftab720\sa520\partightenfactor0
\cf4 \uc0\u8232 
\f3\b\fs21\fsmilli10667 \cb3 Fig 1.5
\f1\b0\fs32 \
If you are using SQL Server 2000, you could execute the following T-SQL Statement. Refer Fig 1.6\
\pard\pardeftab720\partightenfactor0

\f2 \cf4 \cb5 SELECT name,cmptlevel,DATABASEPROPERTYEX(name,'Recovery')AS RecoveryModel, \
DATABASEPROPERTYEX(name,'Status') as Status FROM sysdatabases\
\pard\pardeftab720\partightenfactor0

\f1 \cf4 \cb1 {{\NeXTGraphic mak-sql-statements-image006.jpg \width6375 \height3345 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\pardeftab720\partightenfactor0
\cf4 \
\pard\pardeftab720\sa520\partightenfactor0
\cf4 \uc0\u8232 
\f3\b\fs21\fsmilli10667 \cb3 Fig 1.6
\f1\b0\fs32 \
\pard\pardeftab720\sa340\partightenfactor0

\fs52 \cf2 \strokec2 T-SQL Statement 6\
\pard\pardeftab720\sa520\partightenfactor0

\fs32 \cf4 \strokec4 The next level of information related to database that is needed is the location of the database. The following T-SQL Statement provides the logical name and the physical location of the data/log files of all the databases available in the current SQL Server instance. Referg Fig 1.7\
\pard\pardeftab720\partightenfactor0

\f2 \cf4 \cb5 SELECT db_name(database_id) as DatabaseName,name,type_desc,physical_name FROM sys.master_files\
\pard\pardeftab720\partightenfactor0

\f1 \cf4 \cb1 {{\NeXTGraphic mak-sql-statements-image007.jpg \width9195 \height2940 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\pardeftab720\partightenfactor0
\cf4 \
\pard\pardeftab720\sa520\partightenfactor0
\cf4 \uc0\u8232 
\f3\b\fs21\fsmilli10667 \cb3 Fig 1.7
\f1\b0\fs32 \
If you are using SQL Server 2000, you could execute the following T-SQL Statement. Refer Fig 1.8\
\pard\pardeftab720\partightenfactor0

\f2 \cf4 \cb5 SELECT db_name(dbid) as DatabaseName,name,filename FROM master.dbo.sysaltfiles\
\pard\pardeftab720\partightenfactor0

\f1 \cf4 \cb1 {{\NeXTGraphic mak-sql-statements-image008.jpg \width9360 \height2820 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\pardeftab720\partightenfactor0
\cf4 \
\pard\pardeftab720\sa520\partightenfactor0
\cf4 \uc0\u8232 
\f3\b\fs21\fsmilli10667 \cb3 Fig 1.8
\f1\b0\fs32 \
\pard\pardeftab720\sa340\partightenfactor0

\fs52 \cf2 \strokec2 T-SQL Statement 7\
\pard\pardeftab720\sa520\partightenfactor0

\fs32 \cf4 \strokec4 A database may contain filegroups other than the primary file group. The following T-SQL Statement gets executed in each database on the server and displays the file groups related results. Refer Fig 1.9\
\pard\pardeftab720\partightenfactor0

\f2 \cf4 \cb5 EXEC master.dbo.sp_MSforeachdb @command1 = 'USE [?] SELECT * FROM sys.filegroups'\
\pard\pardeftab720\partightenfactor0

\f1 \cf4 \cb1 {{\NeXTGraphic mak-sql-statements-image009.jpg \width9360 \height2265 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\pardeftab720\partightenfactor0
\cf4 \
\pard\pardeftab720\sa520\partightenfactor0
\cf4 \uc0\u8232 
\f3\b\fs21\fsmilli10667 \cb3 Fig 1.9
\f1\b0\fs32 \
\pard\pardeftab720\sa400\partightenfactor0

\fs64 \cf2 \strokec2 Backup Level Transact-SQL Statements a SQL Server DBA should know\
\pard\pardeftab720\sa340\partightenfactor0

\fs52 \cf2 T-SQL Statement 8\
\pard\pardeftab720\sa520\partightenfactor0

\fs32 \cf4 \strokec4 Backup of a database is bread and butter for database administrators. The following T-SQL Statement lists all of the databases in the server and the last day the backup happened. This will help the database administrators to check the backup jobs and also to make sure backups are happening for all the databases. Refer Fig 1.10\
\pard\pardeftab720\partightenfactor0

\f2 \cf4 \cb5 SELECT db.name, \
case when MAX(b.backup_finish_date) is NULL then 'No Backup' else convert(varchar(100), \
	MAX(b.backup_finish_date)) end AS last_backup_finish_date\
FROM sys.databases db\
LEFT OUTER JOIN msdb.dbo.backupset b ON db.name = b.database_name AND b.type = 'D'\
	WHERE db.database_id NOT IN (2) \
GROUP BY db.name\
ORDER BY 2 DESC\
\pard\pardeftab720\partightenfactor0

\f1 \cf4 \cb1 {{\NeXTGraphic mak-sql-statements-image010.jpg \width4305 \height3645 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\pardeftab720\partightenfactor0
\cf4 \
\pard\pardeftab720\sa520\partightenfactor0
\cf4 \uc0\u8232 
\f3\b\fs21\fsmilli10667 \cb3 Fig 1.10
\f1\b0\fs32 \
\pard\pardeftab720\sa340\partightenfactor0

\fs52 \cf2 \strokec2 T-SQL Statement 9\
\pard\pardeftab720\sa520\partightenfactor0

\fs32 \cf4 \strokec4 The next level of information that is important for a SQL Server database administrator to know is the location of all the backup files. You don\'92t want the backups to go to the local drive or to an OS drive. The following T-SQL statement gets all the information related to the current backup location from the msdb database. Refer Fig 1.11\
\pard\pardeftab720\partightenfactor0

\f2 \cf4 \cb5 SELECT Distinct physical_device_name FROM msdb.dbo.backupmediafamily\
\pard\pardeftab720\partightenfactor0

\f1 \cf4 \cb1 {{\NeXTGraphic mak-sql-statements-image011.jpg \width2115 \height1695 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\pardeftab720\partightenfactor0
\cf4 \
\pard\pardeftab720\sa520\partightenfactor0
\cf4 \uc0\u8232 
\f3\b\fs21\fsmilli10667 \cb3 Fig 1.11
\f1\b0\fs32 \
\pard\pardeftab720\sa400\partightenfactor0

\fs64 \cf2 \strokec2 Process Level Transact-SQL Statements a SQL Server DBA should know\
\pard\pardeftab720\sa340\partightenfactor0

\fs52 \cf2 T-SQL Statement 10\
\pard\pardeftab720\sa520\partightenfactor0

\fs32 \cf4 \strokec4 Last but not least, is the information related to current processes and connection related information. From the beginning, SQL Server database administrators used sp_who and sp_who2 to check the current users, process and session information. These statements also provided information related to cpu, memory and blocking information related to the sessions. Refer Fig 1.12. Also, search the internet for sp_who3. You can find many articles related to sp_who3.\
\pard\pardeftab720\partightenfactor0

\f2 \cf4 \cb5 sp_who\
sp_who2\
\pard\pardeftab720\partightenfactor0

\f1 \cf4 \cb1 {{\NeXTGraphic mak-sql-statements-image012.jpg \width9360 \height3165 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\pardeftab720\partightenfactor0
\cf4 \
\pard\pardeftab720\sa520\partightenfactor0
\cf4 \uc0\u8232 
\f3\b\fs21\fsmilli10667 \cb3 Fig 1.12
\f1\b0\fs32 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 ====================================================================================================\
\
\
=======================================================================================================\
\
\pard\pardeftab720\sa320\partightenfactor0

\f4\b\fs32 \cf7 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 To create a Table
\f5\b0 \
\pard\pardeftab720\partightenfactor0

\f6\fs27\fsmilli13600 \cf7 	create table risk_clos_rank(\
		id_num int IDENTITY(1,1) NOT NULL,\
	    username nvarchar(100),\
	    datetime_of_decision DATETIME\
	);\
	\
	CREATE TABLE TheNameOfYourTable (\
	  ID INT NOT NULL IDENTITY(1,1),\
	  DateAdded DATETIME DEFAULT(getdate()) NOT NULL,\
	  Description VARCHAR(100) NULL,\
	  IsGood BIT DEFAULT(0) NOT NULL,\
	  TotalPrice MONEY NOT NULL,  \
	  CategoryID int NOT NULL REFERENCES Categories(ID),\
	  PRIMARY KEY (ID)\
	);\cb1 \
\pard\pardeftab720\sa320\partightenfactor0

\f4\b\fs32 \cf7 \cb3 To create a copy of table( doesnt create constraints like primary key, not null , indexes ect)
\f5\b0 \
\pard\pardeftab720\partightenfactor0

\f6\fs27\fsmilli13600 \cf7 	SELECT * INTO NewTable FROM OldTable\
    Eg. SELECT * INTO clos_ext_bkup FROM clos_ext;\cb1 \
\pard\pardeftab720\sa320\partightenfactor0

\f4\b\fs32 \cf7 \cb3 To create a copy of table with its data (create and insert)
\f5\b0 \
\pard\pardeftab720\partightenfactor0

\f6\fs27\fsmilli13600 \cf7 	SELECT expressions INTO new_table FROM tables [WHERE conditions];\
	SELECT employee_id AS contact_id, last_name, first_name INTO contacts FROM employees WHERE employee_id < 1000;\cb1 \
\pard\pardeftab720\sa320\partightenfactor0

\f5\fs32 \cf7 \cb3 The format of new_table is determined by evaluating the expressions in the select list. The columns in new_table are created in the order specified by the select list. Each column in new_table has the same name, data type, nullability, and value as the corresponding expression in the select list.\

\f4\b Inserting Data from another table ( only insert)
\f5\b0 \
\pard\pardeftab720\partightenfactor0

\f6\fs27\fsmilli13600 \cf7 	INSERT INTO Table (col1, col2, col3) SELECT col1, col2, col3  FROM other_table WHERE sql = 'cool'	\
	INSERT INTO contacts (contact_id, last_name, first_name) SELECT employee_id, last_name, first_name FROM employees WHERE employee_id <= 100;\cb1 \
\pard\pardeftab720\sa320\partightenfactor0

\f4\b\fs32 \cf7 \cb3 Inserting Multiple values
\f5\b0 \
\pard\pardeftab720\partightenfactor0

\f6\fs27\fsmilli13600 \cf7 	INSERT INTO table1 (First, Last)\
	VALUES\
		('Fred', 'Smith'),\
		('John', 'Smith'),\
		('Michael', 'Smith'),\
		('Robert', 'Smith');\cb1 \
\pard\pardeftab720\sa320\partightenfactor0

\f4\b\fs32 \cf7 \cb3 To add a column
\f5\b0 \
\pard\pardeftab720\partightenfactor0

\f6\fs27\fsmilli13600 \cf7 	ALTER TABLE table_name  ADD column_1 column-definition,column_2 column-definition,column_n column_definition;\
	alter table risk_user_approval_tree add lineusr nvarchar(100);\
	ALTER TABLE table ADD columnname BIT CONSTRAINT Constraint_name DEFAULT 0 WITH VALUES\cb1 \
\pard\pardeftab720\sa320\partightenfactor0

\f4\b\fs32 \cf7 \cb3 To add a auto increment
\f5\b0 \
\pard\pardeftab720\partightenfactor0

\f6\fs27\fsmilli13600 \cf7 \cb1 	ALTER TABLE 'tableName' ADD 'NewColumn' INT IDENTITY(1,1);\
\pard\pardeftab720\sa320\partightenfactor0

\f4\b\fs32 \cf7 \cb3 To add a column with computed value
\f5\b0 \
\pard\pardeftab720\partightenfactor0

\f6\fs27\fsmilli13600 \cf7 	ALTER TABLE dbo.Products ADD RetailValue AS (QtyAvailable * UnitPrice * 1.5);\cb1 \
\pard\pardeftab720\sa320\partightenfactor0

\f4\b\fs32 \cf7 \cb3 To delete/drop a column
\f5\b0 \
\pard\pardeftab720\partightenfactor0

\f6\fs27\fsmilli13600 \cf7 	ALTER TABLE table_name DROP COLUMN column_name;\cb1 \
\pard\pardeftab720\sa320\partightenfactor0

\f4\b\fs32 \cf7 \cb3 To drop a table
\f5\b0 \
\pard\pardeftab720\partightenfactor0

\f6\fs27\fsmilli13600 \cf7 	DROP TABLE tablename;\cb1 \
\pard\pardeftab720\sa320\partightenfactor0

\f4\b\fs32 \cf7 \cb3 To modify a column
\f5\b0 \
\pard\pardeftab720\partightenfactor0

\f6\fs27\fsmilli13600 \cf7 	ALTER TABLE table_name ALTER COLUMN column_name column_type;\cb1 \
\pard\pardeftab720\sa320\partightenfactor0

\f4\b\fs32 \cf7 \cb3 To update a row
\f5\b0 \
\pard\pardeftab720\partightenfactor0

\f6\fs27\fsmilli13600 \cf7 	UPDATE clos_customer_master SET Prev = 'Reactivation' WHERE Prev = 'Reactivate';\cb1 \
\pard\pardeftab720\sa320\partightenfactor0

\f4\b\fs32 \cf7 \cb3 To update a row from select clause
\f5\b0 \
\pard\pardeftab720\partightenfactor0

\f6\fs27\fsmilli13600 \cf7 	UPDATE table SET Col1 = i.Col1, Col2 = i.Col2 FROM ( SELECT ID, Col1, Col2 FROM other_table) i WHERE i.ID = table.ID;\cb1 \
\pard\pardeftab720\sa320\partightenfactor0

\f5\fs32 \cf7 \cb3 The subquery results are substituted into the outer query. As we need table object in outer query, we need to make an alias of inner query.\

\f4\b To add a primary key
\f5\b0 \
\pard\pardeftab720\partightenfactor0

\f6\fs27\fsmilli13600 \cf7 	ALTER TABLE table_name ADD CONSTRAINT constraint_name PRIMARY KEY (column1, column2, ... column_n);\cb1 \
\pard\pardeftab720\sa320\partightenfactor0

\f4\b\fs32 \cf7 \cb3 To find the name of constraints
\f5\b0 \
\pard\pardeftab720\partightenfactor0

\f6\fs27\fsmilli13600 \cf7 	SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE TABLE_NAME = 'tablename'\cb1 \
\pard\pardeftab720\sa320\partightenfactor0

\f4\b\fs32 \cf7 \cb3 To find name of Primary key constraint
\f5\b0 \
\pard\pardeftab720\partightenfactor0

\f6\fs27\fsmilli13600 \cf7 	SELECT name FROM sys.key_constraints  WHERE type = 'PK' AND OBJECT_NAME(parent_object_id) = N'CLOS_ext';  	\cb1 \
\pard\pardeftab720\sa320\partightenfactor0

\f4\b\fs32 \cf7 \cb3 Drop primary key
\f5\b0 \
\pard\pardeftab720\partightenfactor0

\f6\fs27\fsmilli13600 \cf7 	ALTER TABLE table_name DROP CONSTRAINT constraint_name;\cb1 \
\pard\pardeftab720\sa320\partightenfactor0

\f4\b\fs32 \cf7 \cb3 To rename a column (alter command doesnt work here)
\f5\b0 \
\pard\pardeftab720\partightenfactor0

\f6\fs27\fsmilli13600 \cf7 	sp_rename 'table_name.old_column_name', 'new_column_name', 'COLUMN';\
	sp_rename 'cl_ff_docm.WINAME', 'WI_NAME', 'COLUMN';\cb1 \
\pard\pardeftab720\sa320\partightenfactor0

\f4\b\fs32 \cf7 \cb3 To rename a table
\f5\b0 \
\pard\pardeftab720\partightenfactor0

\f6\fs27\fsmilli13600 \cf7 	sp_rename 'old_table_name', 'new_table_name';\cb1 \
\pard\pardeftab720\sa320\partightenfactor0

\f4\b\fs32 \cf7 \cb3 To top 10% of records
\f5\b0 \
\pard\pardeftab720\partightenfactor0

\f6\fs27\fsmilli13600 \cf7 	SELECT TOP(10) * FROM CLOS_EXT\cb1 \
\pard\pardeftab720\sa320\partightenfactor0

\f4\b\fs32 \cf7 \cb3 To find when a table was altered
\f5\b0 \
\pard\pardeftab720\partightenfactor0

\f6\fs27\fsmilli13600 \cf7 	SELECT [name] , create_date, modify_date FROM sys.tables;\cb1 \
\pard\pardeftab720\sa320\partightenfactor0

\f4\b\fs32 \cf7 \cb3 To find which table contains a given column
\f5\b0 \
\pard\pardeftab720\partightenfactor0

\f6\fs27\fsmilli13600 \cf7 	SELECT * FROM INFORMATION_SCHEMA.COLUMNS;\
	\
	SELECT OBJECT_SCHEMA_NAME (c.object_id) SchemaName,\
			o.Name AS Table_Name, \
			c.Name AS Field_Name,\
			t.Name AS Data_Type,\
			t.max_length AS Length_Size,\
			t.precision AS Precision\
	FROM sys.columns c \
		 INNER JOIN sys.objects o ON o.object_id = c.object_id\
		 LEFT JOIN  sys.types t on t.user_type_id  = c.user_type_id   \
	WHERE o.type = 'U'\
	-- and o.Name = 'YourTableName'\
	ORDER BY o.Name, c.Name\cb1 \
\pard\pardeftab720\sa320\partightenfactor0

\f4\b\fs32 \cf7 \cb3 To find which table has which constraint and on which column.
\f5\b0 \
\pard\pardeftab720\partightenfactor0

\f6\fs27\fsmilli13600 \cf7 	Select * from INFORMATION_SCHEMA.KEY_COLUMN_USAGE;\cb1 \
\pard\pardeftab720\sa320\partightenfactor0

\f4\b\fs32 \cf7 \cb3 Selcting based on case
\f5\b0 \
\pard\pardeftab720\partightenfactor0

\f6\fs27\fsmilli13600 \cf7 	SELECT CASE \
    		WHEN <test>      THEN <returnvalue>\
            WHEN <othertest> THEN <returnthis>\
            ELSE <returndefaultcase>\
       END AS <newcolumnname>\
	FROM <table>\
	\
    Eg.\
	SELECT   ProductNumber, Name, "Price Range" =   \
		  CASE   \
			 WHEN ListPrice =  0 THEN 'Mfg item - not for resale'  \
			 WHEN ListPrice < 50 THEN 'Under $50'  \
			 WHEN ListPrice >= 50 and ListPrice < 250 THEN 'Under $250'  \
			 WHEN ListPrice >= 250 and ListPrice < 1000 THEN 'Under $1000'  \
			 ELSE 'Over $1000'  \
		  END  \
	FROM Production.Product  \
	ORDER BY ProductNumber ;  \cb1 \
\pard\pardeftab720\sa320\partightenfactor0

\f4\b\fs32 \cf7 \cb3 Adding row numbers to the result
\f5\b0 \'a0//here we are creating\
\pard\pardeftab720\partightenfactor0

\f6\fs27\fsmilli13600 \cf7 	SELECT ROW_NUMBER() OVER(ORDER BY name ASC) AS Row#, name, \
    		recovery_model_desc\
		FROM sys.databases \
		WHERE database_id < 5;\cb1 \
\pard\pardeftab720\sa320\partightenfactor0

\f4\b\fs32 \cf7 \cb3 While Loop
\f5\b0 \
\pard\pardeftab720\partightenfactor0

\f6\fs27\fsmilli13600 \cf7 	DECLARE @MaxCount INTEGER\
	DECLARE @Count INTEGER\
	DECLARE @Txt VARCHAR(MAX)\
	SET @Count = 1\
	SET @Txt = ''\
	SET @MaxCount = (SELECT MAX(RowID) FROM ConcatenationDemo) \
	WHILE @Count<=@MaxCount\
		BEGIN\
		IF @Txt!=''\
			SET @Txt=@Txt+',' + (SELECT Txt FROM ConcatenationDemo \
            WHERE RowID=@Count)\
		ELSE\
			SET @Txt=(SELECT Txt FROM ConcatenationDemo WHERE RowID=@Count)\
		SET @Count += 1\
		END\
	SELECT @Txt AS Txt\
\
	DECLARE @i int\
	SET @i = 0\
	WHILE (@i < 10)\
	BEGIN\
		SET @i = @i + 1\
		PRINT @i\
		IF (@i >= 10)\
			BREAK\
		ELSE\
			CONTINUE\
	END\cb1 \
\pard\pardeftab720\sa320\partightenfactor0

\f4\b\fs32 \cf7 \cb3 Try / Catch Statements
\f5\b0 \
\pard\pardeftab720\partightenfactor0

\f6\fs27\fsmilli13600 \cf7 	BEGIN TRY\
		-- try / catch requires SQLServer 2005 \
		-- run your code here\
	END TRY\
	BEGIN CATCH\
		PRINT 'Error Number: ' + str(error_number()) \
		PRINT 'Line Number: ' + str(error_line())\
		PRINT error_message()\
		-- handle error condition\
	END CATCH\cb1 \
\pard\pardeftab720\sa320\partightenfactor0

\f4\b\fs32 \cf7 \cb3 To get date in DD/MM/YYYY format
\f5\b0 \
\pard\pardeftab720\partightenfactor0

\f6\fs27\fsmilli13600 \cf7 	SELECT CONVERT(varchar, GETDATE(), 103);\cb1 \
\pard\pardeftab720\sa320\partightenfactor0

\f4\b\fs32 \cf7 \cb3 To get all foreign keys refrencing a given table
\f5\b0 \
\pard\pardeftab720\partightenfactor0

\f6\fs27\fsmilli13600 \cf7 	EXEC sp_fkeys 'TableName'\cb1 \
\pard\pardeftab720\sa320\partightenfactor0

\f4\b\fs32 \cf7 \cb3 To get datatype, size of columns of a table
\f5\b0 \
\pard\pardeftab720\partightenfactor0

\f6\fs27\fsmilli13600 \cf7 	EXEC sp_columns CLOS_EXT;\cb1 \
\pard\pardeftab720\sa320\partightenfactor0

\f4\b\fs32 \cf7 \cb3 To get empty string after concatenation of a string with NULL
\f5\b0 \
When\'a0
\f4\b SET CONCAT_NULL_YIELDS_NULL
\f5\b0 \'a0is ON, concatenating a null value with a string yields a NULL result.\
For example, SELECT 'abc' + NULL yields NULL.\
When SET CONCAT_NULL_YIELDS_NULL is OFF, concatenating a null value with a string yields the string itself (the null value is treated as an empty string).\
For example, SELECT 'abc' + NULL yields abc.\

\f4\b To compile without executing
\f5\b0 \
\pard\pardeftab720\partightenfactor0

\f6\fs27\fsmilli13600 \cf7 	SET NOEXEC ON;  	\cb1 \
\pard\pardeftab720\sa320\partightenfactor0

\f5\fs32 \cf7 \cb3 When SET NOEXEC is ON, SQL Server compiles each batch of Transact-SQL statements but does not execute them.\

\f4\b Updating data from another table
\f5\b0 \
\pard\pardeftab720\partightenfactor0

\f6\fs27\fsmilli13600 \cf7 	UPDATE table  SET Col1 = i.Col1, Col2 = i.Col2 FROM ( SELECT ID, Col1, Col2 FROM other_table) i WHERE i.ID = table.ID\cb1 \
\pard\pardeftab720\sa320\partightenfactor0

\f4\b\fs32 \cf7 \cb3 Check if column exists in table
\f5\b0 \
\pard\pardeftab720\partightenfactor0

\f6\fs27\fsmilli13600 \cf7 	IF EXISTS(SELECT 1 FROM sys.columns \
			  WHERE Name = N'columnName'\
			  AND Object_ID = Object_ID(N'schemaName.tableName'))\
	BEGIN\
		-- Column Exists\
	END\cb1 \
\pard\pardeftab720\sa320\partightenfactor0

\f4\b\fs32 \cf7 \cb3 Converting Multi row data into a comma separated string
\f5\b0 \
\pard\pardeftab720\partightenfactor0

\f6\fs27\fsmilli13600 \cf7 	DECLARE @Names VARCHAR(8000) \
	SELECT @Names = COALESCE(@Names + ', ', '') + \
		ISNULL(Name, 'N/A')\
	FROM People\cb1 \
\pard\pardeftab720\sa320\partightenfactor0

\f4\b\fs32 \cf7 \cb3 Nvarchar
\f5\b0 \'a0allows storing of unicode data\

\f4\b To remove duplicate rows
\f5\b0 \
\pard\pardeftab720\partightenfactor0

\f6\fs27\fsmilli13600 \cf7 	select  distinct * into t2 from t1;\
	delete from t1;\
	insert into t1 select *  from t2;\
	drop table t2;\cb1 \
\pard\pardeftab720\sa320\partightenfactor0

\f4\b\fs32 \cf7 \cb3 Check if the table exists
\f5\b0 \
\pard\pardeftab720\partightenfactor0

\f6\fs27\fsmilli13600 \cf7 	IF (EXISTS (\
	  SELECT * \
      FROM INFORMATION_SCHEMA.TABLES \
      WHERE TABLE_SCHEMA = 'TheSchema' \
      AND  TABLE_NAME = 'TheTable')\
      )\
	BEGIN\
		--Do Stuff\
	END\cb1 \
\pard\pardeftab720\sa320\partightenfactor0

\f4\b\fs32 \cf7 \cb3 Find tables with given column name
\f5\b0 \
\pard\pardeftab720\partightenfactor0

\f6\fs27\fsmilli13600 \cf7 	select * from INFORMATION_SCHEMA.COLUMNS \
	where COLUMN_NAME like '%clientid%' \
	order by TABLE_NAME\cb1 \
\pard\pardeftab720\sa320\partightenfactor0

\f4\b\fs32 \cf7 \cb3 Find all user tables
\f5\b0 \
\pard\pardeftab720\partightenfactor0

\f6\fs27\fsmilli13600 \cf7 	SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE='BASE TABLE'\cb1 \
\pard\pardeftab720\sa320\partightenfactor0

\f4\b\fs32 \cf7 \cb3 Allows explicit values to be inserted into the identity column of a table.
\f5\b0 \
\pard\pardeftab720\partightenfactor0

\f6\fs27\fsmilli13600 \cf7 	SET IDENTITY_INSERT dbo.Tool ON    \cb1 \
\pard\pardeftab720\sa320\partightenfactor0

\f5\fs32 \cf7 \cb3 The\'a0
\f4\b DBCC CHECKIDENT
\f5\b0 \'a0management command is used to reset identity counter. Example:\
\pard\pardeftab720\partightenfactor0

\f6\fs27\fsmilli13600 \cf7 	DBCC CHECKIDENT ('[TestTable]', RESEED, 0);\
	GO\cb1 \
\pard\pardeftab720\sa320\partightenfactor0

\f4\b\fs32 \cf7 \cb3 DECLARE and SET Varibales
\f5\b0 \
\pard\pardeftab720\partightenfactor0

\f6\fs27\fsmilli13600 \cf7 	DECLARE @Mojo int\
	SET @Mojo = 1\
	SELECT @Mojo = Column FROM Table WHERE id=1;\cb1 \
\pard\pardeftab720\sa320\partightenfactor0

\f4\b\fs32 \cf7 \cb3 Add a Foreign Key
\f5\b0 \
\pard\pardeftab720\partightenfactor0

\f6\fs27\fsmilli13600 \cf7 	ALTER TABLE Products WITH CHECK ADD CONSTRAINT [FK_Prod_Man] FOREIGN KEY(ManufacturerID) REFERENCES Manufacturers (ID);\cb1 \
\pard\pardeftab720\sa320\partightenfactor0

\f4\b\fs32 \cf7 \cb3 Add a NULL Constraint
\f5\b0 \
\pard\pardeftab720\partightenfactor0

\f6\fs27\fsmilli13600 \cf7 	ALTER TABLE TableName ALTER COLUMN ColumnName int NOT NULL;\cb1 \
\pard\pardeftab720\sa320\partightenfactor0

\f4\b\fs32 \cf7 \cb3 Set Default Value for Column
\f5\b0 \
\pard\pardeftab720\partightenfactor0

\f6\fs27\fsmilli13600 \cf7 	ALTER TABLE TableName ADD CONSTRAINT DF_TableName_ColumnName DEFAULT 0 FOR ColumnName;\cb1 \
\pard\pardeftab720\sa320\partightenfactor0

\f4\b\fs32 \cf7 \cb3 Create an Index
\f5\b0 \
\pard\pardeftab720\partightenfactor0

\f6\fs27\fsmilli13600 \cf7 	CREATE INDEX IX_Index_Name ON Table(Columns)\cb1 \
\pard\pardeftab720\sa320\partightenfactor0

\f4\b\fs32 \cf7 \cb3 Check Constraint
\f5\b0 \
\pard\pardeftab720\partightenfactor0

\f6\fs27\fsmilli13600 \cf7 	ALTER TABLE TableName ADD CONSTRAINT CK_CheckName CHECK (ColumnValue > 1)	\cb1 \
\pard\pardeftab720\sa320\partightenfactor0

\f4\b\fs32 \cf7 \cb3 Single Line Comments
\f5\b0 \
\pard\pardeftab720\partightenfactor0

\f6\fs27\fsmilli13600 \cf7 	SET @mojo = 1 --THIS IS A COMMENT\cb1 \
\pard\pardeftab720\sa320\partightenfactor0

\f4\b\fs32 \cf7 \cb3 Multi-Line Comments
\f5\b0 \
\pard\pardeftab720\partightenfactor0

\f6\fs27\fsmilli13600 \cf7 	/* This is a comment\
		that can span\
		multiple lines\
	*/	\cb1 \
\pard\pardeftab720\sa320\partightenfactor0

\f4\b\fs32 \cf7 \cb3 User Defined Function
\f5\b0 \
\pard\pardeftab720\partightenfactor0

\f6\fs27\fsmilli13600 \cf7 \cb1 	CREATE FUNCTION dbo.DoStuff(@ID int)\
	RETURNS int\
	AS\
	BEGIN\
	  DECLARE @result int\
	  IF @ID = 0\
		BEGIN\
			RETURN 0\
		END\
	  SELECT @result = COUNT(*) \
	  FROM table WHERE ID = @ID\
	  RETURN @result\
	END\
	GO\
	SELECT dbo.DoStuff(0);	\
\pard\pardeftab720\sa320\partightenfactor0

\f4\b\fs32 \cf7 \cb3 Pivot - To convert rows into columns
\f5\b0 \
\pard\pardeftab720\partightenfactor0

\f6\fs27\fsmilli13600 \cf7 	SELECT Wi_name, Often, Sometimes, Never, NA\
	FROM\
    (\
        SELECT  Wi_name, Past_due, 'Selected' T, '' F\
        FROM NG_CA_MISCELLANEOUS_DETAILS\
    ) P1\
    PIVOT\
    ( \
         MAX(T) for Past_due IN ([Often], [Sometimes], [Never],[NA])\
    )\
    P2 ORDER BY WI_NAME;\cb1 \
\pard\pardeftab720\sa320\partightenfactor0

\f4\b\fs32 \cf7 \cb3 WITH (NOLOCK)
\f5\b0 \
is the equivalent of using READ UNCOMMITED as a transaction isolation level. While it can prevent reads being deadlocked by other.\
\pard\pardeftab720\partightenfactor0

\f4\b\fs30 \cf7 \cb1 \
\pard\pardeftab720\sa320\partightenfactor0
\cf7 \cb3 Finding the last identity inserted into a table\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa320\partightenfactor0
\ls1\ilvl0
\fs32 \cf7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 @@IDENTITY
\f5\b0 \'a0returns the last identity value generated for any table in the current session, across all scopes. You need to be careful here, since it's across scopes. You could get a value from a trigger, instead of your current statement.\cb1 \
\ls1\ilvl0
\f4\b \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 SCOPE_IDENTITY()
\f5\b0 \'a0returns the last identity value generated for any table in the current session and the current scope. Generally what you want to use.\cb1 \
\ls1\ilvl0
\f4\b \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 IDENT_CURRENT('tableName')
\f5\b0 \'a0returns the last identity value generated for a specific table in any session and any scope. This lets you specify which table you want the value from, in case the two above aren't quite what you need (very rare). You could use this if you want to get the current IDENTITY value for a table that you have not inserted a record into.\cb1 \
\pard\pardeftab720\sa320\partightenfactor0
\cf7 \cb3 @@IDENTITY and SCOPE_IDENTITY will return the last identity value generated in any table in the current session.\
However, SCOPE_IDENTITY returns the value only within the current scope; @@IDENTITY is not limited to a specific scope. That is, if there was a second IDENTITY inserted based on a trigger after your insert, it would not be reflected in SCOPE_IDENTITY, only the insert you performed.\
IDENT_CURRENT is not limited by scope and session; it is limited to a specified table. IDENT_CURRENT returns the identity value generated for a specific table in any session and any scope. For more information, see IDENT_CURRENT.\
\pard\pardeftab720\partightenfactor0
\cf7 Identity doesn\'92t guarantee uniqueness. If you want that, make a PK or add a unique index.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
}